
PRE-LAB 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ed  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073a  00000000  00000000  00001205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048b  00000000  00000000  0000193f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027b  00000000  00000000  000023a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 31       	cpi	r26, 0x12	; 18
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 75 00 	call	0xea	; 0xea <main>
  88:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
volatile uint16_t adc_values[3]; // Almacena valores ADC [A5, A6, A7]
volatile uint8_t current_channel = 0;

void setup() {
	// 1. Configurar PWM manual para LED en PD7
	pwm_manual_init(PD7);
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	0e 94 3d 01 	call	0x27a	; 0x27a <pwm_manual_init>
	
	// 2. Configurar pines de servos como salidas
	DDRB |= (1 << PB1) | (1 << PB2);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	86 60       	ori	r24, 0x06	; 6
  9a:	84 b9       	out	0x04, r24	; 4
	
	// 3. Configurar Timer1 para PWM modo 14 (ICR1 como TOP) - Servos
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  9c:	82 ea       	ldi	r24, 0xA2	; 162
  9e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
  a2:	8a e1       	ldi	r24, 0x1A	; 26
  a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Periodo PWM 20ms (50Hz) para servos
	ICR1 = 39999; // (16MHz/8)/50Hz - 1
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	9c e9       	ldi	r25, 0x9C	; 156
  ac:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  b0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	// Valores iniciales servos (1ms)
	OCR1A = 3000; // Servo1 en PB1
  b4:	88 eb       	ldi	r24, 0xB8	; 184
  b6:	9b e0       	ldi	r25, 0x0B	; 11
  b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 3000; // Servo2 en PB2
  c0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  c4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	// 4. Configurar ADC con autoscan de 3 canales (A5, A6, A7)
	ADMUX = (1 << REFS0); // AVcc como referencia
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8f e8       	ldi	r24, 0x8F	; 143
  d4:	80 83       	st	Z, r24
	ADCSRB = 0; // Modo libre
  d6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	
	// Habilitar resistencias de pull-up en entradas ADC
	PORTC |= (1 << PC5);
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	88 b9       	out	0x08, r24	; 8
	
	// Iniciar primera conversión ADC
	ADCSRA |= (1 << ADSC);
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
	
	// Habilitar interrupciones globales
	sei();
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <main>:
}

int main(void) {
	setup();
  ea:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	
	while (1) {
		
		// Actualización suave del brillo del LED
		pwm_manual_update();
  ee:	0e 94 62 01 	call	0x2c4	; 0x2c4 <pwm_manual_update>
  f2:	fd cf       	rjmp	.-6      	; 0xee <main+0x4>

000000f4 <__vector_21>:
		
	}
}

// Interrupción ADC para lectura de potenciómetros
ISR(ADC_vect) {
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	cf 92       	push	r12
 100:	df 92       	push	r13
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	

	
	// Guardar valor del canal actual
	adc_values[current_channel] = ADC;
 126:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 130:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e4 5f       	subi	r30, 0xF4	; 244
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	91 83       	std	Z+1, r25	; 0x01
 13e:	80 83       	st	Z, r24
	
	// Cambiar al siguiente canal (0:A5, 1:A6, 2:A7)
	current_channel = (current_channel + 1) % 3;
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	63 e0       	ldi	r22, 0x03	; 3
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 8b 03 	call	0x716	; 0x716 <__divmodhi4>
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	// Configurar próximo canal
	ADMUX = (1 << REFS0) | (current_channel == 0 ? (1 << MUX2) | (1 << MUX0) :
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	88 23       	and	r24, r24
 15a:	31 f0       	breq	.+12     	; 0x168 <__vector_21+0x74>
	current_channel == 1 ? (1 << MUX2) | (1 << MUX1) :
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	// Cambiar al siguiente canal (0:A5, 1:A6, 2:A7)
	current_channel = (current_channel + 1) % 3;
	
	// Configurar próximo canal
	ADMUX = (1 << REFS0) | (current_channel == 0 ? (1 << MUX2) | (1 << MUX0) :
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	21 f4       	brne	.+8      	; 0x16c <__vector_21+0x78>
 164:	86 e4       	ldi	r24, 0x46	; 70
 166:	03 c0       	rjmp	.+6      	; 0x16e <__vector_21+0x7a>
 168:	85 e4       	ldi	r24, 0x45	; 69
 16a:	01 c0       	rjmp	.+2      	; 0x16e <__vector_21+0x7a>
 16c:	87 e4       	ldi	r24, 0x47	; 71
 16e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	current_channel == 1 ? (1 << MUX2) | (1 << MUX1) :
	(1 << MUX2) | (1 << MUX1) | (1 << MUX0));
	
	// Actualizar PWM del LED con valor de A5 (convertido de 10bit a 8bit)
	pwm_manual_set(adc_values[0] >> 2);
 172:	cc e0       	ldi	r28, 0x0C	; 12
 174:	d1 e0       	ldi	r29, 0x01	; 1
 176:	88 81       	ld	r24, Y
 178:	99 81       	ldd	r25, Y+1	; 0x01
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	0e 94 5f 01 	call	0x2be	; 0x2be <pwm_manual_set>
	
	// Actualizar servos según los valores leídos
	OCR1A = 2000 + ((uint32_t)adc_values[1] * 3250 / 1023); // A6 controla Servo1 (PB1)
 186:	2a 81       	ldd	r18, Y+2	; 0x02
 188:	3b 81       	ldd	r19, Y+3	; 0x03
 18a:	a2 eb       	ldi	r26, 0xB2	; 178
 18c:	bc e0       	ldi	r27, 0x0C	; 12
 18e:	0e 94 c1 03 	call	0x782	; 0x782 <__umulhisi3>
 192:	0f 2e       	mov	r0, r31
 194:	cc 24       	eor	r12, r12
 196:	ca 94       	dec	r12
 198:	f3 e0       	ldi	r31, 0x03	; 3
 19a:	df 2e       	mov	r13, r31
 19c:	e1 2c       	mov	r14, r1
 19e:	f1 2c       	mov	r15, r1
 1a0:	f0 2d       	mov	r31, r0
 1a2:	a7 01       	movw	r20, r14
 1a4:	96 01       	movw	r18, r12
 1a6:	0e 94 9f 03 	call	0x73e	; 0x73e <__udivmodsi4>
 1aa:	20 53       	subi	r18, 0x30	; 48
 1ac:	38 4f       	sbci	r19, 0xF8	; 248
 1ae:	08 e8       	ldi	r16, 0x88	; 136
 1b0:	10 e0       	ldi	r17, 0x00	; 0
 1b2:	f8 01       	movw	r30, r16
 1b4:	31 83       	std	Z+1, r19	; 0x01
 1b6:	20 83       	st	Z, r18
	OCR1B = 2000 + ((uint32_t)adc_values[2] * 3250 / 1023); // A7 controla Servo2 (PB2)
 1b8:	2c 81       	ldd	r18, Y+4	; 0x04
 1ba:	3d 81       	ldd	r19, Y+5	; 0x05
 1bc:	a2 eb       	ldi	r26, 0xB2	; 178
 1be:	bc e0       	ldi	r27, 0x0C	; 12
 1c0:	0e 94 c1 03 	call	0x782	; 0x782 <__umulhisi3>
 1c4:	a7 01       	movw	r20, r14
 1c6:	96 01       	movw	r18, r12
 1c8:	0e 94 9f 03 	call	0x73e	; 0x73e <__udivmodsi4>
 1cc:	20 53       	subi	r18, 0x30	; 48
 1ce:	38 4f       	sbci	r19, 0xF8	; 248
 1d0:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1d4:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	// Limitar valores para proteger servos
	if(OCR1A < 2000) OCR1A = 2000;  // Límite inferior (0°)
 1d8:	f8 01       	movw	r30, r16
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	80 3d       	cpi	r24, 0xD0	; 208
 1e0:	97 40       	sbci	r25, 0x07	; 7
 1e2:	30 f4       	brcc	.+12     	; 0x1f0 <__vector_21+0xfc>
 1e4:	80 ed       	ldi	r24, 0xD0	; 208
 1e6:	97 e0       	ldi	r25, 0x07	; 7
 1e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	if(OCR1A > 5250) OCR1A = 5250;  // Límite superior (180°)
 1f0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1f4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1f8:	83 38       	cpi	r24, 0x83	; 131
 1fa:	94 41       	sbci	r25, 0x14	; 20
 1fc:	30 f0       	brcs	.+12     	; 0x20a <__vector_21+0x116>
 1fe:	82 e8       	ldi	r24, 0x82	; 130
 200:	94 e1       	ldi	r25, 0x14	; 20
 202:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 206:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	if(OCR1B < 2000) OCR1B = 2000;
 20a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 20e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 212:	80 3d       	cpi	r24, 0xD0	; 208
 214:	97 40       	sbci	r25, 0x07	; 7
 216:	30 f4       	brcc	.+12     	; 0x224 <__vector_21+0x130>
 218:	80 ed       	ldi	r24, 0xD0	; 208
 21a:	97 e0       	ldi	r25, 0x07	; 7
 21c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 220:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	if(OCR1B > 5250) OCR1B = 5250;
 224:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 228:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 22c:	83 38       	cpi	r24, 0x83	; 131
 22e:	94 41       	sbci	r25, 0x14	; 20
 230:	30 f0       	brcs	.+12     	; 0x23e <__vector_21+0x14a>
 232:	82 e8       	ldi	r24, 0x82	; 130
 234:	94 e1       	ldi	r25, 0x14	; 20
 236:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 23a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	// Iniciar nueva conversión
	ADCSRA |= (1 << ADSC);
 23e:	ea e7       	ldi	r30, 0x7A	; 122
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 64       	ori	r24, 0x40	; 64
 246:	80 83       	st	Z, r24
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	df 90       	pop	r13
 26e:	cf 90       	pop	r12
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <pwm_manual_init>:
static float current_brightness = 0;
static volatile uint16_t last_update_time = 0;

void pwm_manual_init(uint8_t pin) {
	// Configurar el pin como salida
	DDRD |= (1 << pin);
 27a:	4a b1       	in	r20, 0x0a	; 10
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	b9 01       	movw	r22, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <pwm_manual_init+0xe>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	8a 95       	dec	r24
 28a:	e2 f7       	brpl	.-8      	; 0x284 <pwm_manual_init+0xa>
 28c:	46 2b       	or	r20, r22
 28e:	4a b9       	out	0x0a, r20	; 10
	pwm_pin_mask = (1 << pin);
 290:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <pwm_pin_mask>
	
	// Configurar Timer0 para PWM manual
	TCCR0A = 0x00; // Modo normal
 294:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01); // Prescaler 8
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0); // Habilitar interrupción
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	// Inicializar valores
	current_brightness = 0;
 2a0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <current_brightness>
 2a4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <current_brightness+0x1>
 2a8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <current_brightness+0x2>
 2ac:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <current_brightness+0x3>
	target_brightness = 0;
 2b0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <target_brightness>
	last_update_time = 0;
 2b4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <last_update_time+0x1>
 2b8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <last_update_time>
 2bc:	08 95       	ret

000002be <pwm_manual_set>:
}

void pwm_manual_set(uint8_t value) {
	target_brightness = value;
 2be:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <target_brightness>
 2c2:	08 95       	ret

000002c4 <pwm_manual_update>:
}

void pwm_manual_update(void) {
 2c4:	cf 92       	push	r12
 2c6:	df 92       	push	r13
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
	static uint16_t timer_counter = 0;
	
	// Actualizar cada UPDATE_INTERVAL ms usando un contador de tiempo
	if (TIFR0 & (1 << TOV0)) {  // Si ocurrió overflow del Timer0
 2cc:	a8 9b       	sbis	0x15, 0	; 21
 2ce:	39 c0       	rjmp	.+114    	; 0x342 <pwm_manual_update+0x7e>
		TIFR0 |= (1 << TOV0);   // Limpiar flag
 2d0:	85 b3       	in	r24, 0x15	; 21
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	85 bb       	out	0x15, r24	; 21
		timer_counter++;
 2d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer_counter.1620>
 2da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer_counter.1620+0x1>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer_counter.1620+0x1>
 2e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer_counter.1620>
		
		if (timer_counter >= UPDATE_INTERVAL) {
 2e8:	0a 97       	sbiw	r24, 0x0a	; 10
 2ea:	58 f1       	brcs	.+86     	; 0x342 <pwm_manual_update+0x7e>
			// Filtro de suavizado
			current_brightness += (target_brightness - current_brightness) * SMOOTHING_FACTOR;
 2ec:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <target_brightness>
 2f0:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <current_brightness>
 2f4:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <current_brightness+0x1>
 2f8:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <current_brightness+0x2>
 2fc:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <current_brightness+0x3>
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 92 02 	call	0x524	; 0x524 <__floatsisf>
 30a:	a7 01       	movw	r20, r14
 30c:	96 01       	movw	r18, r12
 30e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__subsf3>
 312:	2d ec       	ldi	r18, 0xCD	; 205
 314:	3c ec       	ldi	r19, 0xCC	; 204
 316:	4c ec       	ldi	r20, 0xCC	; 204
 318:	5d e3       	ldi	r21, 0x3D	; 61
 31a:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 31e:	9b 01       	movw	r18, r22
 320:	ac 01       	movw	r20, r24
 322:	c7 01       	movw	r24, r14
 324:	b6 01       	movw	r22, r12
 326:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__addsf3>
 32a:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <current_brightness>
 32e:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <current_brightness+0x1>
 332:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current_brightness+0x2>
 336:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <current_brightness+0x3>
			timer_counter = 0;
 33a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer_counter.1620+0x1>
 33e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer_counter.1620>
		}
	}
}
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	08 95       	ret

0000034c <__vector_16>:

ISR(TIMER0_OVF_vect) {
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	static uint8_t pwm_counter = 0;
	uint8_t threshold = (uint8_t)current_brightness;
 36e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <current_brightness>
 372:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <current_brightness+0x1>
 376:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current_brightness+0x2>
 37a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current_brightness+0x3>
 37e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fixunssfsi>
	
	// Manejo de valores bajos
	if (threshold < 2) {
 382:	62 30       	cpi	r22, 0x02	; 2
 384:	48 f4       	brcc	.+18     	; 0x398 <__vector_16+0x4c>
		PORTD &= ~pwm_pin_mask;
 386:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pwm_pin_mask>
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	80 95       	com	r24
 38e:	90 95       	com	r25
 390:	9b b1       	in	r25, 0x0b	; 11
 392:	89 23       	and	r24, r25
 394:	8b b9       	out	0x0b, r24	; 11
		return;
 396:	17 c0       	rjmp	.+46     	; 0x3c6 <__vector_16+0x7a>
	}
	
	// PWM normal
	if (pwm_counter < threshold) {
 398:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pwm_counter.1626>
 39c:	86 17       	cp	r24, r22
 39e:	30 f4       	brcc	.+12     	; 0x3ac <__vector_16+0x60>
		PORTD |= pwm_pin_mask;
 3a0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <pwm_pin_mask>
 3a4:	8b b1       	in	r24, 0x0b	; 11
 3a6:	89 2b       	or	r24, r25
 3a8:	8b b9       	out	0x0b, r24	; 11
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <__vector_16+0x70>
		} else {
		PORTD &= ~pwm_pin_mask;
 3ac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pwm_pin_mask>
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	80 95       	com	r24
 3b4:	90 95       	com	r25
 3b6:	9b b1       	in	r25, 0x0b	; 11
 3b8:	89 23       	and	r24, r25
 3ba:	8b b9       	out	0x0b, r24	; 11
	}
	
	pwm_counter++;
 3bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pwm_counter.1626>
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pwm_counter.1626>
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__subsf3>:
 3e8:	50 58       	subi	r21, 0x80	; 128

000003ea <__addsf3>:
 3ea:	bb 27       	eor	r27, r27
 3ec:	aa 27       	eor	r26, r26
 3ee:	0e 94 0c 02 	call	0x418	; 0x418 <__addsf3x>
 3f2:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_round>
 3f6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_pscA>
 3fa:	38 f0       	brcs	.+14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscB>
 400:	20 f0       	brcs	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 402:	39 f4       	brne	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	9f 3f       	cpi	r25, 0xFF	; 255
 406:	19 f4       	brne	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 408:	26 f4       	brtc	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40a:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_nan>
 40e:	0e f4       	brtc	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	e0 95       	com	r30
 412:	e7 fb       	bst	r30, 7
 414:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>

00000418 <__addsf3x>:
 418:	e9 2f       	mov	r30, r25
 41a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 41e:	58 f3       	brcs	.-42     	; 0x3f6 <__addsf3+0xc>
 420:	ba 17       	cp	r27, r26
 422:	62 07       	cpc	r22, r18
 424:	73 07       	cpc	r23, r19
 426:	84 07       	cpc	r24, r20
 428:	95 07       	cpc	r25, r21
 42a:	20 f0       	brcs	.+8      	; 0x434 <__addsf3x+0x1c>
 42c:	79 f4       	brne	.+30     	; 0x44c <__addsf3x+0x34>
 42e:	a6 f5       	brtc	.+104    	; 0x498 <__addsf3x+0x80>
 430:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 434:	0e f4       	brtc	.+2      	; 0x438 <__addsf3x+0x20>
 436:	e0 95       	com	r30
 438:	0b 2e       	mov	r0, r27
 43a:	ba 2f       	mov	r27, r26
 43c:	a0 2d       	mov	r26, r0
 43e:	0b 01       	movw	r0, r22
 440:	b9 01       	movw	r22, r18
 442:	90 01       	movw	r18, r0
 444:	0c 01       	movw	r0, r24
 446:	ca 01       	movw	r24, r20
 448:	a0 01       	movw	r20, r0
 44a:	11 24       	eor	r1, r1
 44c:	ff 27       	eor	r31, r31
 44e:	59 1b       	sub	r21, r25
 450:	99 f0       	breq	.+38     	; 0x478 <__addsf3x+0x60>
 452:	59 3f       	cpi	r21, 0xF9	; 249
 454:	50 f4       	brcc	.+20     	; 0x46a <__addsf3x+0x52>
 456:	50 3e       	cpi	r21, 0xE0	; 224
 458:	68 f1       	brcs	.+90     	; 0x4b4 <__addsf3x+0x9c>
 45a:	1a 16       	cp	r1, r26
 45c:	f0 40       	sbci	r31, 0x00	; 0
 45e:	a2 2f       	mov	r26, r18
 460:	23 2f       	mov	r18, r19
 462:	34 2f       	mov	r19, r20
 464:	44 27       	eor	r20, r20
 466:	58 5f       	subi	r21, 0xF8	; 248
 468:	f3 cf       	rjmp	.-26     	; 0x450 <__addsf3x+0x38>
 46a:	46 95       	lsr	r20
 46c:	37 95       	ror	r19
 46e:	27 95       	ror	r18
 470:	a7 95       	ror	r26
 472:	f0 40       	sbci	r31, 0x00	; 0
 474:	53 95       	inc	r21
 476:	c9 f7       	brne	.-14     	; 0x46a <__addsf3x+0x52>
 478:	7e f4       	brtc	.+30     	; 0x498 <__addsf3x+0x80>
 47a:	1f 16       	cp	r1, r31
 47c:	ba 0b       	sbc	r27, r26
 47e:	62 0b       	sbc	r22, r18
 480:	73 0b       	sbc	r23, r19
 482:	84 0b       	sbc	r24, r20
 484:	ba f0       	brmi	.+46     	; 0x4b4 <__addsf3x+0x9c>
 486:	91 50       	subi	r25, 0x01	; 1
 488:	a1 f0       	breq	.+40     	; 0x4b2 <__addsf3x+0x9a>
 48a:	ff 0f       	add	r31, r31
 48c:	bb 1f       	adc	r27, r27
 48e:	66 1f       	adc	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	88 1f       	adc	r24, r24
 494:	c2 f7       	brpl	.-16     	; 0x486 <__addsf3x+0x6e>
 496:	0e c0       	rjmp	.+28     	; 0x4b4 <__addsf3x+0x9c>
 498:	ba 0f       	add	r27, r26
 49a:	62 1f       	adc	r22, r18
 49c:	73 1f       	adc	r23, r19
 49e:	84 1f       	adc	r24, r20
 4a0:	48 f4       	brcc	.+18     	; 0x4b4 <__addsf3x+0x9c>
 4a2:	87 95       	ror	r24
 4a4:	77 95       	ror	r23
 4a6:	67 95       	ror	r22
 4a8:	b7 95       	ror	r27
 4aa:	f7 95       	ror	r31
 4ac:	9e 3f       	cpi	r25, 0xFE	; 254
 4ae:	08 f0       	brcs	.+2      	; 0x4b2 <__addsf3x+0x9a>
 4b0:	b0 cf       	rjmp	.-160    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 4b2:	93 95       	inc	r25
 4b4:	88 0f       	add	r24, r24
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <__addsf3x+0xa2>
 4b8:	99 27       	eor	r25, r25
 4ba:	ee 0f       	add	r30, r30
 4bc:	97 95       	ror	r25
 4be:	87 95       	ror	r24
 4c0:	08 95       	ret

000004c2 <__fixunssfsi>:
 4c2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fp_splitA>
 4c6:	88 f0       	brcs	.+34     	; 0x4ea <__fixunssfsi+0x28>
 4c8:	9f 57       	subi	r25, 0x7F	; 127
 4ca:	98 f0       	brcs	.+38     	; 0x4f2 <__fixunssfsi+0x30>
 4cc:	b9 2f       	mov	r27, r25
 4ce:	99 27       	eor	r25, r25
 4d0:	b7 51       	subi	r27, 0x17	; 23
 4d2:	b0 f0       	brcs	.+44     	; 0x500 <__fixunssfsi+0x3e>
 4d4:	e1 f0       	breq	.+56     	; 0x50e <__fixunssfsi+0x4c>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	1a f0       	brmi	.+6      	; 0x4e6 <__fixunssfsi+0x24>
 4e0:	ba 95       	dec	r27
 4e2:	c9 f7       	brne	.-14     	; 0x4d6 <__fixunssfsi+0x14>
 4e4:	14 c0       	rjmp	.+40     	; 0x50e <__fixunssfsi+0x4c>
 4e6:	b1 30       	cpi	r27, 0x01	; 1
 4e8:	91 f0       	breq	.+36     	; 0x50e <__fixunssfsi+0x4c>
 4ea:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_zero>
 4ee:	b1 e0       	ldi	r27, 0x01	; 1
 4f0:	08 95       	ret
 4f2:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 4f6:	67 2f       	mov	r22, r23
 4f8:	78 2f       	mov	r23, r24
 4fa:	88 27       	eor	r24, r24
 4fc:	b8 5f       	subi	r27, 0xF8	; 248
 4fe:	39 f0       	breq	.+14     	; 0x50e <__fixunssfsi+0x4c>
 500:	b9 3f       	cpi	r27, 0xF9	; 249
 502:	cc f3       	brlt	.-14     	; 0x4f6 <__fixunssfsi+0x34>
 504:	86 95       	lsr	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b3 95       	inc	r27
 50c:	d9 f7       	brne	.-10     	; 0x504 <__fixunssfsi+0x42>
 50e:	3e f4       	brtc	.+14     	; 0x51e <__fixunssfsi+0x5c>
 510:	90 95       	com	r25
 512:	80 95       	com	r24
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	8f 4f       	sbci	r24, 0xFF	; 255
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	08 95       	ret

00000520 <__floatunsisf>:
 520:	e8 94       	clt
 522:	09 c0       	rjmp	.+18     	; 0x536 <__floatsisf+0x12>

00000524 <__floatsisf>:
 524:	97 fb       	bst	r25, 7
 526:	3e f4       	brtc	.+14     	; 0x536 <__floatsisf+0x12>
 528:	90 95       	com	r25
 52a:	80 95       	com	r24
 52c:	70 95       	com	r23
 52e:	61 95       	neg	r22
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	99 23       	and	r25, r25
 538:	a9 f0       	breq	.+42     	; 0x564 <__floatsisf+0x40>
 53a:	f9 2f       	mov	r31, r25
 53c:	96 e9       	ldi	r25, 0x96	; 150
 53e:	bb 27       	eor	r27, r27
 540:	93 95       	inc	r25
 542:	f6 95       	lsr	r31
 544:	87 95       	ror	r24
 546:	77 95       	ror	r23
 548:	67 95       	ror	r22
 54a:	b7 95       	ror	r27
 54c:	f1 11       	cpse	r31, r1
 54e:	f8 cf       	rjmp	.-16     	; 0x540 <__floatsisf+0x1c>
 550:	fa f4       	brpl	.+62     	; 0x590 <__floatsisf+0x6c>
 552:	bb 0f       	add	r27, r27
 554:	11 f4       	brne	.+4      	; 0x55a <__floatsisf+0x36>
 556:	60 ff       	sbrs	r22, 0
 558:	1b c0       	rjmp	.+54     	; 0x590 <__floatsisf+0x6c>
 55a:	6f 5f       	subi	r22, 0xFF	; 255
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	16 c0       	rjmp	.+44     	; 0x590 <__floatsisf+0x6c>
 564:	88 23       	and	r24, r24
 566:	11 f0       	breq	.+4      	; 0x56c <__floatsisf+0x48>
 568:	96 e9       	ldi	r25, 0x96	; 150
 56a:	11 c0       	rjmp	.+34     	; 0x58e <__floatsisf+0x6a>
 56c:	77 23       	and	r23, r23
 56e:	21 f0       	breq	.+8      	; 0x578 <__floatsisf+0x54>
 570:	9e e8       	ldi	r25, 0x8E	; 142
 572:	87 2f       	mov	r24, r23
 574:	76 2f       	mov	r23, r22
 576:	05 c0       	rjmp	.+10     	; 0x582 <__floatsisf+0x5e>
 578:	66 23       	and	r22, r22
 57a:	71 f0       	breq	.+28     	; 0x598 <__floatsisf+0x74>
 57c:	96 e8       	ldi	r25, 0x86	; 134
 57e:	86 2f       	mov	r24, r22
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	2a f0       	brmi	.+10     	; 0x590 <__floatsisf+0x6c>
 586:	9a 95       	dec	r25
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	da f7       	brpl	.-10     	; 0x586 <__floatsisf+0x62>
 590:	88 0f       	add	r24, r24
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	97 f9       	bld	r25, 7
 598:	08 95       	ret

0000059a <__fp_inf>:
 59a:	97 f9       	bld	r25, 7
 59c:	9f 67       	ori	r25, 0x7F	; 127
 59e:	80 e8       	ldi	r24, 0x80	; 128
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	08 95       	ret

000005a6 <__fp_nan>:
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	08 95       	ret

000005ac <__fp_pscA>:
 5ac:	00 24       	eor	r0, r0
 5ae:	0a 94       	dec	r0
 5b0:	16 16       	cp	r1, r22
 5b2:	17 06       	cpc	r1, r23
 5b4:	18 06       	cpc	r1, r24
 5b6:	09 06       	cpc	r0, r25
 5b8:	08 95       	ret

000005ba <__fp_pscB>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	12 16       	cp	r1, r18
 5c0:	13 06       	cpc	r1, r19
 5c2:	14 06       	cpc	r1, r20
 5c4:	05 06       	cpc	r0, r21
 5c6:	08 95       	ret

000005c8 <__fp_round>:
 5c8:	09 2e       	mov	r0, r25
 5ca:	03 94       	inc	r0
 5cc:	00 0c       	add	r0, r0
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <__fp_round+0xc>
 5d0:	88 23       	and	r24, r24
 5d2:	52 f0       	brmi	.+20     	; 0x5e8 <__fp_round+0x20>
 5d4:	bb 0f       	add	r27, r27
 5d6:	40 f4       	brcc	.+16     	; 0x5e8 <__fp_round+0x20>
 5d8:	bf 2b       	or	r27, r31
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__fp_round+0x18>
 5dc:	60 ff       	sbrs	r22, 0
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__fp_round+0x20>
 5e0:	6f 5f       	subi	r22, 0xFF	; 255
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <__fp_split3>:
 5ea:	57 fd       	sbrc	r21, 7
 5ec:	90 58       	subi	r25, 0x80	; 128
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	59 f0       	breq	.+22     	; 0x60a <__fp_splitA+0x10>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	71 f0       	breq	.+28     	; 0x614 <__fp_splitA+0x1a>
 5f8:	47 95       	ror	r20

000005fa <__fp_splitA>:
 5fa:	88 0f       	add	r24, r24
 5fc:	97 fb       	bst	r25, 7
 5fe:	99 1f       	adc	r25, r25
 600:	61 f0       	breq	.+24     	; 0x61a <__fp_splitA+0x20>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <__fp_splitA+0x2a>
 606:	87 95       	ror	r24
 608:	08 95       	ret
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	55 1f       	adc	r21, r21
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <__fp_split3+0xe>
 614:	46 95       	lsr	r20
 616:	f1 df       	rcall	.-30     	; 0x5fa <__fp_splitA>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__fp_splitA+0x30>
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	99 1f       	adc	r25, r25
 622:	f1 cf       	rjmp	.-30     	; 0x606 <__fp_splitA+0xc>
 624:	86 95       	lsr	r24
 626:	71 05       	cpc	r23, r1
 628:	61 05       	cpc	r22, r1
 62a:	08 94       	sec
 62c:	08 95       	ret

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__mulsf3>:
 63c:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3x>
 640:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_round>
 644:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_pscA>
 648:	38 f0       	brcs	.+14     	; 0x658 <__mulsf3+0x1c>
 64a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscB>
 64e:	20 f0       	brcs	.+8      	; 0x658 <__mulsf3+0x1c>
 650:	95 23       	and	r25, r21
 652:	11 f0       	breq	.+4      	; 0x658 <__mulsf3+0x1c>
 654:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>
 658:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_nan>
 65c:	11 24       	eor	r1, r1
 65e:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>

00000662 <__mulsf3x>:
 662:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 666:	70 f3       	brcs	.-36     	; 0x644 <__mulsf3+0x8>

00000668 <__mulsf3_pse>:
 668:	95 9f       	mul	r25, r21
 66a:	c1 f3       	breq	.-16     	; 0x65c <__mulsf3+0x20>
 66c:	95 0f       	add	r25, r21
 66e:	50 e0       	ldi	r21, 0x00	; 0
 670:	55 1f       	adc	r21, r21
 672:	62 9f       	mul	r22, r18
 674:	f0 01       	movw	r30, r0
 676:	72 9f       	mul	r23, r18
 678:	bb 27       	eor	r27, r27
 67a:	f0 0d       	add	r31, r0
 67c:	b1 1d       	adc	r27, r1
 67e:	63 9f       	mul	r22, r19
 680:	aa 27       	eor	r26, r26
 682:	f0 0d       	add	r31, r0
 684:	b1 1d       	adc	r27, r1
 686:	aa 1f       	adc	r26, r26
 688:	64 9f       	mul	r22, r20
 68a:	66 27       	eor	r22, r22
 68c:	b0 0d       	add	r27, r0
 68e:	a1 1d       	adc	r26, r1
 690:	66 1f       	adc	r22, r22
 692:	82 9f       	mul	r24, r18
 694:	22 27       	eor	r18, r18
 696:	b0 0d       	add	r27, r0
 698:	a1 1d       	adc	r26, r1
 69a:	62 1f       	adc	r22, r18
 69c:	73 9f       	mul	r23, r19
 69e:	b0 0d       	add	r27, r0
 6a0:	a1 1d       	adc	r26, r1
 6a2:	62 1f       	adc	r22, r18
 6a4:	83 9f       	mul	r24, r19
 6a6:	a0 0d       	add	r26, r0
 6a8:	61 1d       	adc	r22, r1
 6aa:	22 1f       	adc	r18, r18
 6ac:	74 9f       	mul	r23, r20
 6ae:	33 27       	eor	r19, r19
 6b0:	a0 0d       	add	r26, r0
 6b2:	61 1d       	adc	r22, r1
 6b4:	23 1f       	adc	r18, r19
 6b6:	84 9f       	mul	r24, r20
 6b8:	60 0d       	add	r22, r0
 6ba:	21 1d       	adc	r18, r1
 6bc:	82 2f       	mov	r24, r18
 6be:	76 2f       	mov	r23, r22
 6c0:	6a 2f       	mov	r22, r26
 6c2:	11 24       	eor	r1, r1
 6c4:	9f 57       	subi	r25, 0x7F	; 127
 6c6:	50 40       	sbci	r21, 0x00	; 0
 6c8:	9a f0       	brmi	.+38     	; 0x6f0 <__mulsf3_pse+0x88>
 6ca:	f1 f0       	breq	.+60     	; 0x708 <__mulsf3_pse+0xa0>
 6cc:	88 23       	and	r24, r24
 6ce:	4a f0       	brmi	.+18     	; 0x6e2 <__mulsf3_pse+0x7a>
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	bb 1f       	adc	r27, r27
 6d6:	66 1f       	adc	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	91 50       	subi	r25, 0x01	; 1
 6de:	50 40       	sbci	r21, 0x00	; 0
 6e0:	a9 f7       	brne	.-22     	; 0x6cc <__mulsf3_pse+0x64>
 6e2:	9e 3f       	cpi	r25, 0xFE	; 254
 6e4:	51 05       	cpc	r21, r1
 6e6:	80 f0       	brcs	.+32     	; 0x708 <__mulsf3_pse+0xa0>
 6e8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>
 6ec:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
 6f0:	5f 3f       	cpi	r21, 0xFF	; 255
 6f2:	e4 f3       	brlt	.-8      	; 0x6ec <__mulsf3_pse+0x84>
 6f4:	98 3e       	cpi	r25, 0xE8	; 232
 6f6:	d4 f3       	brlt	.-12     	; 0x6ec <__mulsf3_pse+0x84>
 6f8:	86 95       	lsr	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b7 95       	ror	r27
 700:	f7 95       	ror	r31
 702:	e7 95       	ror	r30
 704:	9f 5f       	subi	r25, 0xFF	; 255
 706:	c1 f7       	brne	.-16     	; 0x6f8 <__mulsf3_pse+0x90>
 708:	fe 2b       	or	r31, r30
 70a:	88 0f       	add	r24, r24
 70c:	91 1d       	adc	r25, r1
 70e:	96 95       	lsr	r25
 710:	87 95       	ror	r24
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret

00000716 <__divmodhi4>:
 716:	97 fb       	bst	r25, 7
 718:	07 2e       	mov	r0, r23
 71a:	16 f4       	brtc	.+4      	; 0x720 <__divmodhi4+0xa>
 71c:	00 94       	com	r0
 71e:	07 d0       	rcall	.+14     	; 0x72e <__divmodhi4_neg1>
 720:	77 fd       	sbrc	r23, 7
 722:	09 d0       	rcall	.+18     	; 0x736 <__divmodhi4_neg2>
 724:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__udivmodhi4>
 728:	07 fc       	sbrc	r0, 7
 72a:	05 d0       	rcall	.+10     	; 0x736 <__divmodhi4_neg2>
 72c:	3e f4       	brtc	.+14     	; 0x73c <__divmodhi4_exit>

0000072e <__divmodhi4_neg1>:
 72e:	90 95       	com	r25
 730:	81 95       	neg	r24
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	08 95       	ret

00000736 <__divmodhi4_neg2>:
 736:	70 95       	com	r23
 738:	61 95       	neg	r22
 73a:	7f 4f       	sbci	r23, 0xFF	; 255

0000073c <__divmodhi4_exit>:
 73c:	08 95       	ret

0000073e <__udivmodsi4>:
 73e:	a1 e2       	ldi	r26, 0x21	; 33
 740:	1a 2e       	mov	r1, r26
 742:	aa 1b       	sub	r26, r26
 744:	bb 1b       	sub	r27, r27
 746:	fd 01       	movw	r30, r26
 748:	0d c0       	rjmp	.+26     	; 0x764 <__udivmodsi4_ep>

0000074a <__udivmodsi4_loop>:
 74a:	aa 1f       	adc	r26, r26
 74c:	bb 1f       	adc	r27, r27
 74e:	ee 1f       	adc	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	a2 17       	cp	r26, r18
 754:	b3 07       	cpc	r27, r19
 756:	e4 07       	cpc	r30, r20
 758:	f5 07       	cpc	r31, r21
 75a:	20 f0       	brcs	.+8      	; 0x764 <__udivmodsi4_ep>
 75c:	a2 1b       	sub	r26, r18
 75e:	b3 0b       	sbc	r27, r19
 760:	e4 0b       	sbc	r30, r20
 762:	f5 0b       	sbc	r31, r21

00000764 <__udivmodsi4_ep>:
 764:	66 1f       	adc	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	1a 94       	dec	r1
 76e:	69 f7       	brne	.-38     	; 0x74a <__udivmodsi4_loop>
 770:	60 95       	com	r22
 772:	70 95       	com	r23
 774:	80 95       	com	r24
 776:	90 95       	com	r25
 778:	9b 01       	movw	r18, r22
 77a:	ac 01       	movw	r20, r24
 77c:	bd 01       	movw	r22, r26
 77e:	cf 01       	movw	r24, r30
 780:	08 95       	ret

00000782 <__umulhisi3>:
 782:	a2 9f       	mul	r26, r18
 784:	b0 01       	movw	r22, r0
 786:	b3 9f       	mul	r27, r19
 788:	c0 01       	movw	r24, r0
 78a:	a3 9f       	mul	r26, r19
 78c:	70 0d       	add	r23, r0
 78e:	81 1d       	adc	r24, r1
 790:	11 24       	eor	r1, r1
 792:	91 1d       	adc	r25, r1
 794:	b2 9f       	mul	r27, r18
 796:	70 0d       	add	r23, r0
 798:	81 1d       	adc	r24, r1
 79a:	11 24       	eor	r1, r1
 79c:	91 1d       	adc	r25, r1
 79e:	08 95       	ret

000007a0 <__udivmodhi4>:
 7a0:	aa 1b       	sub	r26, r26
 7a2:	bb 1b       	sub	r27, r27
 7a4:	51 e1       	ldi	r21, 0x11	; 17
 7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <__udivmodhi4_ep>

000007a8 <__udivmodhi4_loop>:
 7a8:	aa 1f       	adc	r26, r26
 7aa:	bb 1f       	adc	r27, r27
 7ac:	a6 17       	cp	r26, r22
 7ae:	b7 07       	cpc	r27, r23
 7b0:	10 f0       	brcs	.+4      	; 0x7b6 <__udivmodhi4_ep>
 7b2:	a6 1b       	sub	r26, r22
 7b4:	b7 0b       	sbc	r27, r23

000007b6 <__udivmodhi4_ep>:
 7b6:	88 1f       	adc	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	5a 95       	dec	r21
 7bc:	a9 f7       	brne	.-22     	; 0x7a8 <__udivmodhi4_loop>
 7be:	80 95       	com	r24
 7c0:	90 95       	com	r25
 7c2:	bc 01       	movw	r22, r24
 7c4:	cd 01       	movw	r24, r26
 7c6:	08 95       	ret

000007c8 <_exit>:
 7c8:	f8 94       	cli

000007ca <__stop_program>:
 7ca:	ff cf       	rjmp	.-2      	; 0x7ca <__stop_program>
