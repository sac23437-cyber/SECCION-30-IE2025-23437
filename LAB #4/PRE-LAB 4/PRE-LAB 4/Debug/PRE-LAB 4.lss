
PRE-LAB 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000761  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f8  00000000  00000000  00001191  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ff  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001af2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  88:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z11update_ledsv>:
	sei();
}

void update_leds(){
	// Actualizamos PB4 (bit 0)
	if(counter_value & 0x01)
  90:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
  94:	80 ff       	sbrs	r24, 0
  96:	04 c0       	rjmp	.+8      	; 0xa0 <_Z11update_ledsv+0x10>
	PORTB |= (1 << PB4);
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <_Z11update_ledsv+0x16>
	else
	PORTB &= ~(1 << PB4);
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	8f 7e       	andi	r24, 0xEF	; 239
  a4:	85 b9       	out	0x05, r24	; 5
	
	// Actualizamos PB5 (bit 1)
	if(counter_value & 0x02)
  a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
  aa:	81 ff       	sbrs	r24, 1
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <_Z11update_ledsv+0x26>
	PORTB |= (1 << PB5);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	03 c0       	rjmp	.+6      	; 0xbc <_Z11update_ledsv+0x2c>
	else
	PORTB &= ~(1 << PB5);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	85 b9       	out	0x05, r24	; 5
	
	// Actualizamos PC0 (bit 2)
	if(counter_value & 0x04)
  bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
  c0:	82 ff       	sbrs	r24, 2
  c2:	04 c0       	rjmp	.+8      	; 0xcc <_Z11update_ledsv+0x3c>
	PORTC |= (1 << PC0);
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <_Z11update_ledsv+0x42>
	else
	PORTC &= ~(1 << PC0);
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	88 b9       	out	0x08, r24	; 8
	
	// Actualizamos PC1 (bit 3)
	if(counter_value & 0x08)
  d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
  d6:	83 ff       	sbrs	r24, 3
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <_Z11update_ledsv+0x52>
	PORTC |= (1 << PC1);
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	88 b9       	out	0x08, r24	; 8
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <_Z11update_ledsv+0x58>
	else
	PORTC &= ~(1 << PC1);
  e2:	88 b1       	in	r24, 0x08	; 8
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	88 b9       	out	0x08, r24	; 8
	
	// Actualizamos PC2 (bit 4)
	if(counter_value & 0x10)
  e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
  ec:	84 ff       	sbrs	r24, 4
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <_Z11update_ledsv+0x68>
	PORTC |= (1 << PC2);
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	03 c0       	rjmp	.+6      	; 0xfe <_Z11update_ledsv+0x6e>
	else
	PORTC &= ~(1 << PC2);
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	88 b9       	out	0x08, r24	; 8
	
	// Actualizamos PC3 (bit 5)
	if(counter_value & 0x20)
  fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
 102:	85 ff       	sbrs	r24, 5
 104:	04 c0       	rjmp	.+8      	; 0x10e <_Z11update_ledsv+0x7e>
	PORTC |= (1 << PC3);
 106:	88 b1       	in	r24, 0x08	; 8
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	88 b9       	out	0x08, r24	; 8
 10c:	03 c0       	rjmp	.+6      	; 0x114 <_Z11update_ledsv+0x84>
	else
	PORTC &= ~(1 << PC3);
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	87 7f       	andi	r24, 0xF7	; 247
 112:	88 b9       	out	0x08, r24	; 8
	
	// Actualizamos PC4 (bit 6)
	if(counter_value & 0x40)
 114:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
 118:	86 ff       	sbrs	r24, 6
 11a:	04 c0       	rjmp	.+8      	; 0x124 <_Z11update_ledsv+0x94>
	PORTC |= (1 << PC4);
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	88 b9       	out	0x08, r24	; 8
 122:	03 c0       	rjmp	.+6      	; 0x12a <_Z11update_ledsv+0x9a>
	else
	PORTC &= ~(1 << PC4);
 124:	88 b1       	in	r24, 0x08	; 8
 126:	8f 7e       	andi	r24, 0xEF	; 239
 128:	88 b9       	out	0x08, r24	; 8
	
	// Actualizamos PC5 (bit 7)
	if(counter_value & 0x80)
 12a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
 12e:	88 23       	and	r24, r24
 130:	24 f4       	brge	.+8      	; 0x13a <_Z11update_ledsv+0xaa>
	PORTC |= (1 << PC5);
 132:	88 b1       	in	r24, 0x08	; 8
 134:	80 62       	ori	r24, 0x20	; 32
 136:	88 b9       	out	0x08, r24	; 8
 138:	08 95       	ret
	else
	PORTC &= ~(1 << PC5);
 13a:	88 b1       	in	r24, 0x08	; 8
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	88 b9       	out	0x08, r24	; 8
 140:	08 95       	ret

00000142 <_Z5setupv>:
}

/************************/
// NON-Interrupt subroutines
void setup(){
	cli();
 142:	f8 94       	cli
	
	// Configuraramos las salidas 
	DDRB |= (1 << PB4) | (1 << PB5);																// Colocamos PB4 y PB5 como salidas (Bit's 0 y 1)
 144:	84 b1       	in	r24, 0x04	; 4
 146:	80 63       	ori	r24, 0x30	; 48
 148:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4) | (1 << PC5);			// Colocamos PC0-PC5 como salidas (Bit's 2 - )
 14a:	87 b1       	in	r24, 0x07	; 7
 14c:	8f 63       	ori	r24, 0x3F	; 63
 14e:	87 b9       	out	0x07, r24	; 7
	
	
	PORTB &= ~((1 << PB2) | (1 << PB3));															// Desactivamos los Pull-Up's internos (botones en configuración Pull-Down externo)
 150:	85 b1       	in	r24, 0x05	; 5
 152:	83 7f       	andi	r24, 0xF3	; 243
 154:	85 b9       	out	0x05, r24	; 5
	
	
	// Configuramos el Timer0 para antirebote 
	TCCR0A = 0x00;
 156:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);																// Colocamos el Prescaler de 1024
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 100; // 
 15c:	84 e6       	ldi	r24, 0x64	; 100
 15e:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1 << TOIE0);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	counter_10ms = 0;
 166:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter_10ms>
	
	
	update_leds();																					// Mostrar valor inicial del contador
 16a:	0e 94 48 00 	call	0x90	; 0x90 <_Z11update_ledsv>
	
	sei();
 16e:	78 94       	sei
 170:	08 95       	ret

00000172 <main>:
void setup();
void update_leds();
/************************/
// Main Function
int main(void){
	setup();
 172:	0e 94 a1 00 	call	0x142	; 0x142 <_Z5setupv>
 176:	ff cf       	rjmp	.-2      	; 0x176 <main+0x4>

00000178 <__vector_16>:
	PORTC &= ~(1 << PC5);
}

/************************/
// Interrupt routines
ISR(TIMER0_OVF_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	TCNT0 = 100;
 19a:	84 e6       	ldi	r24, 0x64	; 100
 19c:	86 bd       	out	0x26, r24	; 38
	counter_10ms++;
 19e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter_10ms>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter_10ms>
	
	// Delay (antirrebote)
	if(counter_10ms == 1){																			// Revisamos cada 50ms 
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	09 f0       	breq	.+2      	; 0x1ae <__vector_16+0x36>
 1ac:	6f c0       	rjmp	.+222    	; 0x28c <__vector_16+0x114>
		counter_10ms = 0;
 1ae:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter_10ms>
		
		// Botón para incremento (PB3)
		if((PINB & (1 << PB3)) && (delay_boton1 < 3)){
 1b2:	1b 9b       	sbis	0x03, 3	; 3
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <__vector_16+0x4a>
 1b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <delay_boton1>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	20 f0       	brcs	.+8      	; 0x1c6 <__vector_16+0x4e>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <__vector_16+0x50>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <__vector_16+0x50>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	88 23       	and	r24, r24
 1ca:	59 f0       	breq	.+22     	; 0x1e2 <__vector_16+0x6a>
			delay_boton1++;
 1cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <delay_boton1>
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delay_boton1>
			if(delay_boton1 == 3){
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	a9 f4       	brne	.+42     	; 0x204 <__vector_16+0x8c>
				boton1 = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <boton1>
 1e0:	11 c0       	rjmp	.+34     	; 0x204 <__vector_16+0x8c>
			}
		}
		else if(!(PINB & (1 << PB3)) && (delay_boton1 > 0)){
 1e2:	1b 99       	sbic	0x03, 3	; 3
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <__vector_16+0x76>
 1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delay_boton1>
 1ea:	91 11       	cpse	r25, r1
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	88 23       	and	r24, r24
 1f0:	49 f0       	breq	.+18     	; 0x204 <__vector_16+0x8c>
			delay_boton1--;
 1f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <delay_boton1>
 1f6:	81 50       	subi	r24, 0x01	; 1
 1f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delay_boton1>
			if(delay_boton1 == 0){
 1fc:	81 11       	cpse	r24, r1
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <__vector_16+0x8c>
				boton1 = 0;
 200:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <boton1>
			}
		}
		
		// Botón para decremento (PB2)
		if((PINB & (1 << PB2)) && (delay_boton2 < 3)){
 204:	1a 9b       	sbis	0x03, 2	; 3
 206:	06 c0       	rjmp	.+12     	; 0x214 <__vector_16+0x9c>
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	20 f0       	brcs	.+8      	; 0x218 <__vector_16+0xa0>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	03 c0       	rjmp	.+6      	; 0x21a <__vector_16+0xa2>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	01 c0       	rjmp	.+2      	; 0x21a <__vector_16+0xa2>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	88 23       	and	r24, r24
 21c:	59 f0       	breq	.+22     	; 0x234 <__vector_16+0xbc>
			delay_boton2++;
 21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(delay_boton2 == 3){
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	a9 f4       	brne	.+42     	; 0x256 <__vector_16+0xde>
				boton2 = 1;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <boton2>
 232:	11 c0       	rjmp	.+34     	; 0x256 <__vector_16+0xde>
			}
		}
		else if(!(PINB & (1 << PB2)) && (delay_boton2 > 0)){
 234:	1a 99       	sbic	0x03, 2	; 3
 236:	04 c0       	rjmp	.+8      	; 0x240 <__vector_16+0xc8>
 238:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	91 11       	cpse	r25, r1
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	88 23       	and	r24, r24
 242:	49 f0       	breq	.+18     	; 0x256 <__vector_16+0xde>
			delay_boton2--;
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(delay_boton2 == 0){
 24e:	81 11       	cpse	r24, r1
 250:	02 c0       	rjmp	.+4      	; 0x256 <__vector_16+0xde>
				boton2 = 0;
 252:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <boton2>
			}
		}
		
		if(boton1){
 256:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <boton1>
 25a:	88 23       	and	r24, r24
 25c:	51 f0       	breq	.+20     	; 0x272 <__vector_16+0xfa>
			counter_value++;
 25e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
 262:	8f 5f       	subi	r24, 0xFF	; 255
 264:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_value>
			update_leds();
 268:	0e 94 48 00 	call	0x90	; 0x90 <_Z11update_ledsv>
			boton1 = 0; // 
 26c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <boton1>
 270:	0d c0       	rjmp	.+26     	; 0x28c <__vector_16+0x114>
		}
		else if(boton2){
 272:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <boton2>
 276:	88 23       	and	r24, r24
 278:	49 f0       	breq	.+18     	; 0x28c <__vector_16+0x114>
			counter_value--;
 27a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_value>
 27e:	81 50       	subi	r24, 0x01	; 1
 280:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_value>
			update_leds();
 284:	0e 94 48 00 	call	0x90	; 0x90 <_Z11update_ledsv>
			boton2 = 0; //
 288:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <boton2>
		}
	}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
