
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  000004fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ab  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006af  00000000  00000000  00000d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000342  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000218  00000000  00000000  00001be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001df9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 32       	cpi	r26, 0x22	; 34
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  88:	0c 94 43 02 	jmp	0x486	; 0x486 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
volatile uint8_t current_channel = 0;

void setup() {
	
	//--------------------------------------------------------------------------------
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128 (más lento pero estable)
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	9f e8       	ldi	r25, 0x8F	; 143
  96:	90 83       	st	Z, r25
	DIDR0 = 0x0F; // Deshabilitar entradas digitales en A0-A3 (si no se usan)
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	//--------------------------------------------------------------------------------
	
	// 1. Configurar todos los pines PWM como salidas
	DDRB |= (1 << PB1) | (1 << PB2) | (1 << PB3); // OC1A, OC1B, OC2A
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	8e 60       	ori	r24, 0x0E	; 14
  a2:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD3) | (1 << PD5) | (1 << PD6);  // OC2B, OC0B, OC0A
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	88 66       	ori	r24, 0x68	; 104
  a8:	8a b9       	out	0x0a, r24	; 10

	// 2. Timer1 (16-bit) para servos de precisión (PB1 y PB2)
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  aa:	82 ea       	ldi	r24, 0xA2	; 162
  ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
  b0:	8a e1       	ldi	r24, 0x1A	; 26
  b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 39999; // 20ms period
  b6:	2f e3       	ldi	r18, 0x3F	; 63
  b8:	3c e9       	ldi	r19, 0x9C	; 156
  ba:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  be:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 3000; // 1.5ms inicial PB1
  c2:	28 eb       	ldi	r18, 0xB8	; 184
  c4:	3b e0       	ldi	r19, 0x0B	; 11
  c6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ca:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 3000; // 1.5ms inicial PB2
  ce:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  d2:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

	// Configuración mejorada para Timer0 (PD5 - OC0B)
	TCCR0A = (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  // Fast PWM
  d6:	23 e2       	ldi	r18, 0x23	; 35
  d8:	24 bd       	out	0x24, r18	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);  // Prescaler 1024 (mayor precisión)
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	85 bd       	out	0x25, r24	; 37
	OCR0B = 38;  // 1.5ms inicial
  de:	86 e2       	ldi	r24, 0x26	; 38
  e0:	88 bd       	out	0x28, r24	; 40

	// Configuración mejorada para Timer2 (PD3 - OC2B)
	TCCR2A = (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);  // Fast PWM
  e2:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);  // Prescaler 1024
  e6:	27 e0       	ldi	r18, 0x07	; 7
  e8:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2B = 38;  // 1.5ms inicial
  ec:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

	// 5. Configurar ADC
	ADMUX = (1 << REFS0);
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  f6:	90 83       	st	Z, r25
	ADCSRB = 0;
  f8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	PORTC |= 0xF0; // Pull-ups en A4-A7
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	80 6f       	ori	r24, 0xF0	; 240
 100:	88 b9       	out	0x08, r24	; 8
	ADCSRA |= (1 << ADSC);
 102:	80 81       	ld	r24, Z
 104:	80 64       	ori	r24, 0x40	; 64
 106:	80 83       	st	Z, r24
	
	sei();
 108:	78 94       	sei
 10a:	08 95       	ret

0000010c <filtered_adc>:
}

uint16_t filtered_adc(uint8_t channel) {
 10c:	8f 92       	push	r8
 10e:	9f 92       	push	r9
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
	static uint16_t samples[4][FILTER_SAMPLES];
	static uint8_t index = 0;
	samples[channel][index] = ADC;
 11e:	28 2f       	mov	r18, r24
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <index.1736>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 12c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 130:	f9 01       	movw	r30, r18
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	e2 0f       	add	r30, r18
 138:	f3 1f       	adc	r31, r19
 13a:	e8 0f       	add	r30, r24
 13c:	f9 1f       	adc	r31, r25
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	e0 50       	subi	r30, 0x00	; 0
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	51 83       	std	Z+1, r21	; 0x01
 148:	40 83       	st	Z, r20
	index = (index + 1) % FILTER_SAMPLES;
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	63 e0       	ldi	r22, 0x03	; 3
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	0e 94 ac 01 	call	0x358	; 0x358 <__divmodhi4>
 154:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <index.1736>
	uint32_t sum = 0;
	for(uint8_t i=0; i<FILTER_SAMPLES; i++) sum += samples[channel][i];
 158:	40 e0       	ldi	r20, 0x00	; 0
uint16_t filtered_adc(uint8_t channel) {
	static uint16_t samples[4][FILTER_SAMPLES];
	static uint8_t index = 0;
	samples[channel][index] = ADC;
	index = (index + 1) % FILTER_SAMPLES;
	uint32_t sum = 0;
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	cb 01       	movw	r24, r22
	for(uint8_t i=0; i<FILTER_SAMPLES; i++) sum += samples[channel][i];
 160:	13 c0       	rjmp	.+38     	; 0x188 <filtered_adc+0x7c>
 162:	f9 01       	movw	r30, r18
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	e2 0f       	add	r30, r18
 16a:	f3 1f       	adc	r31, r19
 16c:	e4 0f       	add	r30, r20
 16e:	f1 1d       	adc	r31, r1
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e0 50       	subi	r30, 0x00	; 0
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	01 90       	ld	r0, Z+
 17a:	f0 81       	ld	r31, Z
 17c:	e0 2d       	mov	r30, r0
 17e:	6e 0f       	add	r22, r30
 180:	7f 1f       	adc	r23, r31
 182:	81 1d       	adc	r24, r1
 184:	91 1d       	adc	r25, r1
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	43 30       	cpi	r20, 0x03	; 3
 18a:	58 f3       	brcs	.-42     	; 0x162 <filtered_adc+0x56>
	return sum / FILTER_SAMPLES;
 18c:	2b ea       	ldi	r18, 0xAB	; 171
 18e:	3a ea       	ldi	r19, 0xAA	; 170
 190:	4a ea       	ldi	r20, 0xAA	; 170
 192:	5a ea       	ldi	r21, 0xAA	; 170
 194:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__umulsidi3>
 198:	00 e2       	ldi	r16, 0x20	; 32
 19a:	0e 94 1e 02 	call	0x43c	; 0x43c <__lshrdi3>
 19e:	82 2e       	mov	r8, r18
 1a0:	93 2e       	mov	r9, r19
 1a2:	a4 2e       	mov	r10, r20
 1a4:	b5 2e       	mov	r11, r21
 1a6:	d5 01       	movw	r26, r10
 1a8:	c4 01       	movw	r24, r8
 1aa:	b6 95       	lsr	r27
 1ac:	a7 95       	ror	r26
 1ae:	97 95       	ror	r25
 1b0:	87 95       	ror	r24
}
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	df 90       	pop	r13
 1ba:	cf 90       	pop	r12
 1bc:	bf 90       	pop	r11
 1be:	af 90       	pop	r10
 1c0:	9f 90       	pop	r9
 1c2:	8f 90       	pop	r8
 1c4:	08 95       	ret

000001c6 <__vector_21>:

ISR(ADC_vect) {
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	adc_values[current_channel] = filtered_adc(current_channel);
 1f4:	c0 91 19 01 	lds	r28, 0x0119	; 0x800119 <current_channel>
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <current_channel>
 1fe:	0e 94 86 00 	call	0x10c	; 0x10c <filtered_adc>
 202:	cc 0f       	add	r28, r28
 204:	dd 1f       	adc	r29, r29
 206:	c6 5e       	subi	r28, 0xE6	; 230
 208:	de 4f       	sbci	r29, 0xFE	; 254
 20a:	99 83       	std	Y+1, r25	; 0x01
 20c:	88 83       	st	Y, r24
	
	current_channel = (current_channel + 1) % 4;
 20e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <current_channel>
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	83 70       	andi	r24, 0x03	; 3
 218:	90 78       	andi	r25, 0x80	; 128
 21a:	99 23       	and	r25, r25
 21c:	24 f4       	brge	.+8      	; 0x226 <__vector_21+0x60>
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	8c 6f       	ori	r24, 0xFC	; 252
 222:	9f 6f       	ori	r25, 0xFF	; 255
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <current_channel>
	
	ADMUX = (1 << REFS0) | (current_channel + 4); // Versión optimizada para A4-A7
 22a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <current_channel>
 22e:	8c 5f       	subi	r24, 0xFC	; 252
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>


	// Asignación directa con protección
	OCR1A = 2000 + (adc_values[3] * 3250UL / 1023); // A7 ? PB1
 236:	ca e1       	ldi	r28, 0x1A	; 26
 238:	d1 e0       	ldi	r29, 0x01	; 1
 23a:	2e 81       	ldd	r18, Y+6	; 0x06
 23c:	3f 81       	ldd	r19, Y+7	; 0x07
 23e:	a2 eb       	ldi	r26, 0xB2	; 178
 240:	bc e0       	ldi	r27, 0x0C	; 12
 242:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__umulhisi3>
 246:	0f 2e       	mov	r0, r31
 248:	cc 24       	eor	r12, r12
 24a:	ca 94       	dec	r12
 24c:	f3 e0       	ldi	r31, 0x03	; 3
 24e:	df 2e       	mov	r13, r31
 250:	e1 2c       	mov	r14, r1
 252:	f1 2c       	mov	r15, r1
 254:	f0 2d       	mov	r31, r0
 256:	a7 01       	movw	r20, r14
 258:	96 01       	movw	r18, r12
 25a:	0e 94 c0 01 	call	0x380	; 0x380 <__udivmodsi4>
 25e:	20 53       	subi	r18, 0x30	; 48
 260:	38 4f       	sbci	r19, 0xF8	; 248
 262:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 266:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 2000 + (adc_values[2] * 3250UL / 1023); // A6 ? PB2
 26a:	2c 81       	ldd	r18, Y+4	; 0x04
 26c:	3d 81       	ldd	r19, Y+5	; 0x05
 26e:	a2 eb       	ldi	r26, 0xB2	; 178
 270:	bc e0       	ldi	r27, 0x0C	; 12
 272:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__umulhisi3>
 276:	a7 01       	movw	r20, r14
 278:	96 01       	movw	r18, r12
 27a:	0e 94 c0 01 	call	0x380	; 0x380 <__udivmodsi4>
 27e:	20 53       	subi	r18, 0x30	; 48
 280:	38 4f       	sbci	r19, 0xF8	; 248
 282:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 286:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	// Mapeo perfecto para rango completo (0-180°)
	OCR0B = 20 + (adc_values[1] * 35 / 1023);  // A5 ? PD5 (0.8ms-2.2ms)
 28a:	2a 81       	ldd	r18, Y+2	; 0x02
 28c:	3b 81       	ldd	r19, Y+3	; 0x03
 28e:	43 e2       	ldi	r20, 0x23	; 35
 290:	42 9f       	mul	r20, r18
 292:	c0 01       	movw	r24, r0
 294:	43 9f       	mul	r20, r19
 296:	90 0d       	add	r25, r0
 298:	11 24       	eor	r1, r1
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	33 e0       	ldi	r19, 0x03	; 3
 29e:	b9 01       	movw	r22, r18
 2a0:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodhi4>
 2a4:	6c 5e       	subi	r22, 0xEC	; 236
 2a6:	68 bd       	out	0x28, r22	; 40
	OCR2B = 20 + (adc_values[0] * 35 / 1023);  // A4 ? PD3 (0.8ms-2.2ms)
 2a8:	68 81       	ld	r22, Y
 2aa:	79 81       	ldd	r23, Y+1	; 0x01
 2ac:	46 9f       	mul	r20, r22
 2ae:	c0 01       	movw	r24, r0
 2b0:	47 9f       	mul	r20, r23
 2b2:	90 0d       	add	r25, r0
 2b4:	11 24       	eor	r1, r1
 2b6:	b9 01       	movw	r22, r18
 2b8:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodhi4>
 2bc:	6c 5e       	subi	r22, 0xEC	; 236
 2be:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

	// Límites estrictos
	if(OCR0B < 20) OCR0B = 20;   // Mínimo 0.8ms (~0°)
 2c2:	88 b5       	in	r24, 0x28	; 40
 2c4:	84 31       	cpi	r24, 0x14	; 20
 2c6:	10 f4       	brcc	.+4      	; 0x2cc <__vector_21+0x106>
 2c8:	84 e1       	ldi	r24, 0x14	; 20
 2ca:	88 bd       	out	0x28, r24	; 40
	if(OCR0B > 55) OCR0B = 55;   // Máximo 2.2ms (~180°)
 2cc:	88 b5       	in	r24, 0x28	; 40
 2ce:	88 33       	cpi	r24, 0x38	; 56
 2d0:	10 f0       	brcs	.+4      	; 0x2d6 <__vector_21+0x110>
 2d2:	87 e3       	ldi	r24, 0x37	; 55
 2d4:	88 bd       	out	0x28, r24	; 40
	if(OCR2B < 20) OCR2B = 20;
 2d6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 2da:	84 31       	cpi	r24, 0x14	; 20
 2dc:	18 f4       	brcc	.+6      	; 0x2e4 <__vector_21+0x11e>
 2de:	84 e1       	ldi	r24, 0x14	; 20
 2e0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	if(OCR2B > 55) OCR2B = 55;
 2e4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 2e8:	88 33       	cpi	r24, 0x38	; 56
 2ea:	18 f0       	brcs	.+6      	; 0x2f2 <__vector_21+0x12c>
 2ec:	87 e3       	ldi	r24, 0x37	; 55
 2ee:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

	ADCSRA |= (1 << ADSC);
 2f2:	ea e7       	ldi	r30, 0x7A	; 122
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 64       	ori	r24, 0x40	; 64
 2fa:	80 83       	st	Z, r24
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <main>:


int main(void) {
	setup();
 32a:	0e 94 48 00 	call	0x90	; 0x90 <setup>
 32e:	ff cf       	rjmp	.-2      	; 0x32e <main+0x4>

00000330 <__udivmodhi4>:
 330:	aa 1b       	sub	r26, r26
 332:	bb 1b       	sub	r27, r27
 334:	51 e1       	ldi	r21, 0x11	; 17
 336:	07 c0       	rjmp	.+14     	; 0x346 <__udivmodhi4_ep>

00000338 <__udivmodhi4_loop>:
 338:	aa 1f       	adc	r26, r26
 33a:	bb 1f       	adc	r27, r27
 33c:	a6 17       	cp	r26, r22
 33e:	b7 07       	cpc	r27, r23
 340:	10 f0       	brcs	.+4      	; 0x346 <__udivmodhi4_ep>
 342:	a6 1b       	sub	r26, r22
 344:	b7 0b       	sbc	r27, r23

00000346 <__udivmodhi4_ep>:
 346:	88 1f       	adc	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	5a 95       	dec	r21
 34c:	a9 f7       	brne	.-22     	; 0x338 <__udivmodhi4_loop>
 34e:	80 95       	com	r24
 350:	90 95       	com	r25
 352:	bc 01       	movw	r22, r24
 354:	cd 01       	movw	r24, r26
 356:	08 95       	ret

00000358 <__divmodhi4>:
 358:	97 fb       	bst	r25, 7
 35a:	07 2e       	mov	r0, r23
 35c:	16 f4       	brtc	.+4      	; 0x362 <__divmodhi4+0xa>
 35e:	00 94       	com	r0
 360:	07 d0       	rcall	.+14     	; 0x370 <__divmodhi4_neg1>
 362:	77 fd       	sbrc	r23, 7
 364:	09 d0       	rcall	.+18     	; 0x378 <__divmodhi4_neg2>
 366:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodhi4>
 36a:	07 fc       	sbrc	r0, 7
 36c:	05 d0       	rcall	.+10     	; 0x378 <__divmodhi4_neg2>
 36e:	3e f4       	brtc	.+14     	; 0x37e <__divmodhi4_exit>

00000370 <__divmodhi4_neg1>:
 370:	90 95       	com	r25
 372:	81 95       	neg	r24
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	08 95       	ret

00000378 <__divmodhi4_neg2>:
 378:	70 95       	com	r23
 37a:	61 95       	neg	r22
 37c:	7f 4f       	sbci	r23, 0xFF	; 255

0000037e <__divmodhi4_exit>:
 37e:	08 95       	ret

00000380 <__udivmodsi4>:
 380:	a1 e2       	ldi	r26, 0x21	; 33
 382:	1a 2e       	mov	r1, r26
 384:	aa 1b       	sub	r26, r26
 386:	bb 1b       	sub	r27, r27
 388:	fd 01       	movw	r30, r26
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <__udivmodsi4_ep>

0000038c <__udivmodsi4_loop>:
 38c:	aa 1f       	adc	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	ee 1f       	adc	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	a2 17       	cp	r26, r18
 396:	b3 07       	cpc	r27, r19
 398:	e4 07       	cpc	r30, r20
 39a:	f5 07       	cpc	r31, r21
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__udivmodsi4_ep>
 39e:	a2 1b       	sub	r26, r18
 3a0:	b3 0b       	sbc	r27, r19
 3a2:	e4 0b       	sbc	r30, r20
 3a4:	f5 0b       	sbc	r31, r21

000003a6 <__udivmodsi4_ep>:
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	1a 94       	dec	r1
 3b0:	69 f7       	brne	.-38     	; 0x38c <__udivmodsi4_loop>
 3b2:	60 95       	com	r22
 3b4:	70 95       	com	r23
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	9b 01       	movw	r18, r22
 3bc:	ac 01       	movw	r20, r24
 3be:	bd 01       	movw	r22, r26
 3c0:	cf 01       	movw	r24, r30
 3c2:	08 95       	ret

000003c4 <__umulhisi3>:
 3c4:	a2 9f       	mul	r26, r18
 3c6:	b0 01       	movw	r22, r0
 3c8:	b3 9f       	mul	r27, r19
 3ca:	c0 01       	movw	r24, r0
 3cc:	a3 9f       	mul	r26, r19
 3ce:	70 0d       	add	r23, r0
 3d0:	81 1d       	adc	r24, r1
 3d2:	11 24       	eor	r1, r1
 3d4:	91 1d       	adc	r25, r1
 3d6:	b2 9f       	mul	r27, r18
 3d8:	70 0d       	add	r23, r0
 3da:	81 1d       	adc	r24, r1
 3dc:	11 24       	eor	r1, r1
 3de:	91 1d       	adc	r25, r1
 3e0:	08 95       	ret

000003e2 <__umulsidi3>:
 3e2:	e8 94       	clt

000003e4 <__umulsidi3_helper>:
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	fc 01       	movw	r30, r24
 3ea:	db 01       	movw	r26, r22
 3ec:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__umulhisi3>
 3f0:	7f 93       	push	r23
 3f2:	6f 93       	push	r22
 3f4:	e9 01       	movw	r28, r18
 3f6:	9a 01       	movw	r18, r20
 3f8:	ac 01       	movw	r20, r24
 3fa:	bf 93       	push	r27
 3fc:	af 93       	push	r26
 3fe:	3f 93       	push	r19
 400:	2f 93       	push	r18
 402:	df 01       	movw	r26, r30
 404:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__umulhisi3>
 408:	26 f4       	brtc	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40a:	6c 1b       	sub	r22, r28
 40c:	7d 0b       	sbc	r23, r29
 40e:	82 0b       	sbc	r24, r18
 410:	93 0b       	sbc	r25, r19
 412:	9e 01       	movw	r18, r28
 414:	eb 01       	movw	r28, r22
 416:	fc 01       	movw	r30, r24
 418:	0e 94 3a 02 	call	0x474	; 0x474 <__muldi3_6>
 41c:	af 91       	pop	r26
 41e:	bf 91       	pop	r27
 420:	2f 91       	pop	r18
 422:	3f 91       	pop	r19
 424:	0e 94 3a 02 	call	0x474	; 0x474 <__muldi3_6>
 428:	be 01       	movw	r22, r28
 42a:	cf 01       	movw	r24, r30
 42c:	f9 01       	movw	r30, r18
 42e:	2f 91       	pop	r18
 430:	3f 91       	pop	r19
 432:	cf 91       	pop	r28
 434:	df 91       	pop	r29
 436:	08 95       	ret

00000438 <__ashrdi3>:
 438:	97 fb       	bst	r25, 7
 43a:	10 f8       	bld	r1, 0

0000043c <__lshrdi3>:
 43c:	16 94       	lsr	r1
 43e:	00 08       	sbc	r0, r0
 440:	0f 93       	push	r16
 442:	08 30       	cpi	r16, 0x08	; 8
 444:	98 f0       	brcs	.+38     	; 0x46c <__lshrdi3+0x30>
 446:	08 50       	subi	r16, 0x08	; 8
 448:	23 2f       	mov	r18, r19
 44a:	34 2f       	mov	r19, r20
 44c:	45 2f       	mov	r20, r21
 44e:	56 2f       	mov	r21, r22
 450:	67 2f       	mov	r22, r23
 452:	78 2f       	mov	r23, r24
 454:	89 2f       	mov	r24, r25
 456:	90 2d       	mov	r25, r0
 458:	f4 cf       	rjmp	.-24     	; 0x442 <__lshrdi3+0x6>
 45a:	05 94       	asr	r0
 45c:	97 95       	ror	r25
 45e:	87 95       	ror	r24
 460:	77 95       	ror	r23
 462:	67 95       	ror	r22
 464:	57 95       	ror	r21
 466:	47 95       	ror	r20
 468:	37 95       	ror	r19
 46a:	27 95       	ror	r18
 46c:	0a 95       	dec	r16
 46e:	aa f7       	brpl	.-22     	; 0x45a <__lshrdi3+0x1e>
 470:	0f 91       	pop	r16
 472:	08 95       	ret

00000474 <__muldi3_6>:
 474:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__umulhisi3>
 478:	46 0f       	add	r20, r22
 47a:	57 1f       	adc	r21, r23
 47c:	c8 1f       	adc	r28, r24
 47e:	d9 1f       	adc	r29, r25
 480:	08 f4       	brcc	.+2      	; 0x484 <__muldi3_6+0x10>
 482:	31 96       	adiw	r30, 0x01	; 1
 484:	08 95       	ret

00000486 <_exit>:
 486:	f8 94       	cli

00000488 <__stop_program>:
 488:	ff cf       	rjmp	.-2      	; 0x488 <__stop_program>
